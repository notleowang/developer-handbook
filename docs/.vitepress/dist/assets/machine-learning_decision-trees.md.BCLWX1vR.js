import{_ as a,D as n,c as t,b as l,w as s,a4 as p,a3 as h,o as i,I as r,a as c}from"./chunks/framework.Cif60x00.js";const F=JSON.parse('{"title":"Decision Trees","description":"","frontmatter":{"prev":false,"next":false,"outline":"deep"},"headers":[],"relativePath":"machine-learning/decision-trees.md","filePath":"machine-learning/decision-trees.md","lastUpdated":null}'),o={name:"machine-learning/decision-trees.md"},d=h(`<h1 id="decision-trees" tabindex="-1">Decision Trees <a class="header-anchor" href="#decision-trees" aria-label="Permalink to &quot;Decision Trees&quot;">â€‹</a></h1><p>Decision trees are simple programs consisting of:</p><ul><li>A nested sequence of <code>if else</code> decisions based on the features.</li><li>A class <code>label</code> as a return value at the end of each sequence.</li></ul><p>Example of a decision tree:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> milk </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;sick&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> egg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;sick&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;not sick&#39;</span></span></code></pre></div><p>You can draw sequences of decisions as a tree:</p>`,6);function k(g,E,u,_,m,y){const e=n("Mermaid");return i(),t("div",null,[d,(i(),l(p,null,{default:s(()=>[r(e,{id:"mermaid-25",class:"mermaid",graph:"flowchart%20LR%0A%20%20Start%20--%3E%20Stop%0A"})]),fallback:s(()=>[c(" Loading... ")]),_:1}))])}const A=a(o,[["render",k]]);export{F as __pageData,A as default};
